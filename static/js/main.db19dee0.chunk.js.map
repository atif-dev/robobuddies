{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAoBeA,EAlBF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAQC,EAAO,EAAPA,GAK7B,OACC,yBAAKC,UAAY,uDAEhB,yBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAA5B,mBACvB,6BACC,4BAAKF,GACL,2BAAIC,MCUOK,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OAEA,6BAGKA,EAAOC,KAAI,SAACC,EAAOC,GACvB,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGR,GAAMK,EAAOG,GAAGR,GAAIF,KAAQO,EAAOG,GAAGV,KAAMC,MAASM,EAAOG,GAAGT,WAJvF,MCIcW,EATG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,yBAAKV,UAAY,OAChB,2BAAOA,UAAY,mCAAmCW,KAAO,SAC5DC,YAAc,gBAAgBC,SAAYH,MCM/BI,EAVC,SAACC,GAGhB,OAFAC,QAAQC,IAAIF,GAGX,yBAAKG,MAAS,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UAClEN,EAAMO,WCeKC,E,kDAnBd,WAAYR,GAAO,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACZC,UAAS,GAHO,E,8DAOAC,EAAQC,GACzBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAKb,MAAMO,a,GAhBOQ,aCqEZC,G,wDA3Dd,aAAc,IAAD,8BACZ,gBAmBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAnBzC,EAAKZ,MAAQ,CACZpB,OAAQ,GACR8B,YAAa,IAEdlB,QAAQC,IAAI,eANA,E,gEASO,IAAD,OAClBoB,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAACzB,OAAQqC,OAEzBzB,QAAQC,IAAI,uB,+BAUL,IAAD,EAEyBW,KAAKJ,MAA7BpB,EAFD,EAECA,OAAS8B,EAFV,EAEUA,YAEVQ,EAAiBtC,EAAOuC,QAAO,SAAAC,GACpC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAGtD,OADA7B,QAAQC,IAAI,UACRb,EAAO2C,OAIX,yBAAK/C,UAAY,MAChB,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWU,aAAgBkB,KAAKI,iBAEhC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAUsC,OATf,8C,GArCQZ,cCCEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLV,QAAQU,MAAMA,EAAMsC,a","file":"static/js/main.db19dee0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name , email , id}) =>{//we have a simple component that is returning card\r\n\r\n\t// const {name , email , id} = props;//called destructing, we can do ths in brackets of card above\r\n\t//just remove props in above brackets and add {name , email , id} \r\n\r\n\treturn(\r\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t\t\t<img alt = \"robots\" src = {`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n\treturn(\r\n\r\n\t<div>\r\n    \t{\r\n\r\n    \t\trobots.map((user , i)=>{\r\n\t\treturn <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\r\n\t})\r\n    \t\t\r\n    \t} {/*we are using braces around card component because this is js not html*/}\t\r\n  \t</div>\r\n\t);\r\n\r\n\t \r\n\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n\treturn(\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input className = 'pa3 ba b--green bg-lightest-blue' type = 'search'\r\n\t\t\t placeholder = 'search robots' onChange = {searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll  = (props) =>{\r\n\tconsole.log(props);\r\n\t// return props.children\r\n\treturn(\r\n\t\t<div style = {{overflowY: 'scroll', border:'5px solid black',height:'360px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error , info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops. Thatis not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';//Creating Searchbox component to use in App ftn\r\n//import {robots} from './robots';//curly braces are used to get multiple robots from robots.js \r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t\tconsole.log(\"constructor\");\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=> {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(users => {\r\n\t\t\t\tthis.setState({robots: users})\r\n\t\t\t})\r\n\t\tconsole.log(\"componentDidMount\");\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t/*console.log(event.target.value);*/\r\n\t\t\r\n\t\t// console.log(filterRobots);\r\n\t}\r\n\r\nrender(){\r\n\r\n\t\tconst {robots , searchfield} = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tconsole.log(\"render\");\r\n\t\tif(!robots.length){//can also use ternary here instead of if else\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t<div className = 'tc'>\r\n\t\t\t<h1 className = \"f1\">RoboBuddies</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t);\r\n\t\t}\r\n\t\r\n\r\n\t\r\n\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import CardList from './components/CardList';//importing card list component\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}